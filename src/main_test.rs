mod com;
mod errors;
mod wrappers;

use wrappers::{CptaApplication, FactoryJournal};
use errors::SageResult;

const BSCPTA_CLSID: &str = "309DE0FB-9FB8-4F4E-8295-CC60C60DAA33";

fn main() -> SageResult<()> {
    println!("üöÄ Test des signatures FactoryJournal corrig√©es v0.1.3");
    println!("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    
    test_factory_journal_corrected()?;
    
    Ok(())
}

fn test_factory_journal_corrected() -> SageResult<()> {
    println!("\n‚úÖ === TEST SIGNATURES CORRIG√âES ===");
    
    // Cr√©er l'application Sage
    let app = CptaApplication::new(BSCPTA_CLSID)?;
    println!("‚úÖ Application Sage cr√©√©e");
    
    // Obtenir la propri√©t√© FactoryJournal
    match app.factory_journal() {
        Ok(factory_journal_variant) => {
            println!("‚úÖ Propri√©t√© FactoryJournal obtenue: {}", factory_journal_variant.type_name());

            if let Ok(factory_journal_dispatch) = factory_journal_variant.to_dispatch() {
                println!("‚úÖ Interface IDispatch extraite de FactoryJournal");
                
                // Cr√©er un wrapper FactoryJournal
                let factory = FactoryJournal {
                    dispatch: factory_journal_dispatch
                };
                
                println!("\nüß™ Test avec signatures corrig√©es (1 param√®tre) :");
                
                // Test ReadNumero avec code journal string
                println!("üìã Test ReadNumero avec code 'VTE'...");
                match factory.read_journal_by_code("VTE") {
                    Ok(result) => println!("   ‚úÖ ReadNumero('VTE') r√©ussi: {:?}", result),
                    Err(e) => println!("   ‚ö†Ô∏è  ReadNumero('VTE'): {} (Dossier ferm√© = normal)", e),
                }
                
                // Test ExistNumero avec code journal string  
                println!("üìã Test ExistNumero avec code 'VTE'...");
                match factory.journal_exists_by_code("VTE") {
                    Ok(exists) => println!("   ‚úÖ ExistNumero('VTE') r√©ussi: Journal existe = {}", exists),
                    Err(e) => println!("   ‚ö†Ô∏è  ExistNumero('VTE'): {} (Dossier ferm√© = normal)", e),
                }
                
                // Test ReadNumero avec num√©ro
                println!("üìã Test ReadNumero avec num√©ro 1...");
                match factory.read_journal_by_number(1) {
                    Ok(result) => println!("   ‚úÖ ReadNumero(1) r√©ussi: {:?}", result),
                    Err(e) => println!("   ‚ö†Ô∏è  ReadNumero(1): {} (Dossier ferm√© = normal)", e),
                }
                
                // Test ExistNumero avec num√©ro
                println!("üìã Test ExistNumero avec num√©ro 1...");
                match factory.journal_exists_by_number(1) {
                    Ok(exists) => println!("   ‚úÖ ExistNumero(1) r√©ussi: Journal existe = {}", exists),
                    Err(e) => println!("   ‚ö†Ô∏è  ExistNumero(1): {} (Dossier ferm√© = normal)", e),
                }
                
                println!("\nüéâ Signatures test√©es avec succ√®s !");
                println!("üí° Erreurs 'Dossier non ouvert' = signatures correctes");
                println!("‚ùå Erreurs 'Nombre de param√®tres non valide' = signatures incorrectes");
                
            } else {
                println!("‚ùå Impossible d'extraire IDispatch de la propri√©t√© FactoryJournal");
            }
        }
        Err(e) => {
            println!("‚ùå Impossible d'obtenir la propri√©t√© FactoryJournal: {}", e);
        }
    }
    
    Ok(())
}
